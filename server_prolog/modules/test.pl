:- [fa].
:- reset_gensym.

testJson :-
    FAJson = fa{finals:[s2,s3],
        id:fa01, 
        initial:s0, 
        moves:[s0/0==>s1, s0/1==>s2,s1/0==>s2,s1/1==>s1,s2/0==>s0,s2/1==>s3], 
        states:[s0, s1, s2,s3], 
        vocabulary:[0, 1]},
    json_to_fa(FAJson, FA),
    format('fa with id ~w was created~n',[FA]),
    fa_initial(FA, S0),
    format('fa has ~w as initial state~n',[S0]),
    fa_finals(FA, Finals),
    forall(member(F, Finals), format('Final states=~w~n',[F])),
    fa_states(FA, States),
    forall(member(S, States), format('State =~w~n',[S])),
    fa_vocabulary(FA, Vocabulary),
    forall(member(V, Vocabulary), format('Symbol =~w~n',[V])),
    fa_moves(FA, Moves),
    forall(member(M, Moves), format('Move =~w~n',[M]))
.

demo :- 
    writeln('---------------- DEMO PAREDIFA II ----------------'),
    sleep(1),
    writeln(''),
    writeln('----------------  GRUPO 02-10AM   ----------------'),
    sleep(1),
    writeln(''),
    writeln('      GENERANDO ESTATICAMENTE UN AUTOMATA FINITO  '),
    sleep(1),
    fa_new_id(FA),
    format('FA creado con id ~w~n',[FA]),
    writeln(''),
    sleep(2),
    writeln('*** agregando vocabulario 0, 1 ***'),
    sleep(1),
    writeln('fa_set_symbol( FA , 0 )'),
    fa_set_symbol(FA,0),
    sleep(1),
    writeln('fa_set_symbol( FA , 1 )'),
    fa_set_symbol(FA,1),
    writeln(''),
    writeln(''),
    sleep(2),
    writeln('*** agregando estados s0, s1, s2 ***'),
    sleep(1),
    writeln('fa_set_state( FA , s0 )'),
    fa_set_state(FA,s0),
    sleep(1),
    writeln('fa_set_state( FA , s1 )'),    
    sleep(1),
    fa_set_state(FA,s1),
    writeln('fa_set_state( FA , s2 )'),
    fa_set_state(FA,s2),
    writeln(''),
    writeln(''),
    sleep(2),
    writeln('*** seteando estado s0 como inicial ***'),
    sleep(1),
    writeln('fa_set_initial( FA , s0 )'),
    fa_set_initial(FA,s0),  
    sleep(2),
    writeln(''),
    writeln(''),
    writeln('*** seteando estado s2 como final ***'),
    sleep(1),
    writeln('fa_set_final( FA , s2 )'),
    fa_set_final(FA,s2),
    sleep(2),
    writeln(''),
    writeln(''),
    writeln('*** agregando trancisiones *** '),
    sleep(1),
    writeln('fa_set_move( FA , s0 / 0 ==> s0 )'),
    fa_set_move(FA,s0/0==>s0),
    sleep(1),
    writeln('fa_set_move( FA , s0 / 1 ==> s2 )'),
    fa_set_move(FA,s0/1==>s2),
    sleep(1),
    writeln('fa_set_move( FA , s1 / 0 ==> s1 )'),
    fa_set_move(FA,s1/0==>s1),
    sleep(1),
    writeln('fa_set_move( FA , s1 / 1 ==> s1 )'),
    fa_set_move(FA,s1/1==>s1),
    sleep(1),
    writeln('fa_set_move( FA , s2 / 0 ==> s1 )'),
    fa_set_move(FA,s2/0==>s1),
    sleep(1),
    writeln('fa_set_move( FA , s2 / 1 ==> s2 )'),
    fa_set_move(FA,s2/1==>s2),
    writeln(''),
    writeln(''),
    sleep(2),
    writeln('*** Objeto Json modelado del FA ***'),
    sleep(1),
    writeln('fa_to_json(FA, Json)'),
    fa_to_json(FA, Json),
    format('Json: ~w',[Json]),
    writeln(''),
    writeln(''),
    writeln('*** Probando hileras en el FA ***')
.

test :- fa_new_id(FA),
        fa_set_symbol(FA,0),
        fa_set_symbol(FA,1),
        fa_set_state(FA,s0),
        fa_set_state(FA,s1),
        fa_set_state(FA,s2),
        fa_set_state(FA,s3),
        fa_set_initial(FA,s0),  
        fa_set_final(FA,s2),
        fa_set_final(FA,s3),
        fa_set_move(FA,s0/0==>s0),
        fa_set_move(FA,s0/1==>s2),
        fa_set_move(FA,s1/0==>s1),
        fa_set_move(FA,s1/1==>s1),
        fa_set_move(FA,s2/0==>s2),
        fa_set_move(FA,s2/1==>s3),
        fa_set_move(FA,s3/0==>s3),
        fa_set_move(FA,s3/1==>s0)
.